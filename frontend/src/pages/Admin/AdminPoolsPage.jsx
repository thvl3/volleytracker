import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Button,
  Card,
  Container,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
  Divider,
  FormControl,
  Grid,
  InputLabel,
  MenuItem,
  Paper,
  Select,
  Tab,
  Tabs,
  Typography,
  Box,
  TextField,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Chip,
  CircularProgress,
  IconButton,
  Alert,
  Breadcrumbs,
  Link
} from '@mui/material';
import {
  Add as AddIcon,
  Delete as DeleteIcon,
  Edit as EditIcon,
  Refresh as RefreshIcon,
  Person as PersonIcon,
  SwapHoriz as SwapHorizIcon,
  EmojiEvents as TrophyIcon
} from '@mui/icons-material';
import AdminLayout from '../../components/AdminLayout';
import { tournamentAPI } from '../../api';
import { teamAPI } from '../../api';
import { poolAPI } from '../../api';
import { locationAPI } from '../../api';
import { formatDateTime } from '../../utils/dateUtils';

const AdminPoolsPage = () => {
  const { tournamentId } = useParams();
  const navigate = useNavigate();
  
  const [tournament, setTournament] = useState(null);
  const [teams, setTeams] = useState([]);
  const [pools, setPools] = useState([]);
  const [locations, setLocations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // Dialog states
  const [openCreatePoolDialog, setOpenCreatePoolDialog] = useState(false);
  const [openAssignTeamsDialog, setOpenAssignTeamsDialog] = useState(false);
  const [openAutoGenerateDialog, setOpenAutoGenerateDialog] = useState(false);
  const [openCompletionDialog, setOpenCompletionDialog] = useState(false);
  
  // Form states
  const [newPool, setNewPool] = useState({
    name: '',
    location_id: '',
    court_number: 1,
    team_ids: []
  });
  
  const [selectedPool, setSelectedPool] = useState(null);
  const [selectedTeams, setSelectedTeams] = useState([]);
  
  // Fetch tournament data
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        // Get tournament details
        const tournamentData = await tournamentAPI.getTournament(tournamentId);
        setTournament(tournamentData);
        
        // Get teams in tournament
        const teamsData = await teamAPI.getTeamsByTournament(tournamentId);
        setTeams(teamsData);
        
        // Get pools in tournament
        const poolsData = await poolAPI.getPoolsByTournament(tournamentId);
        setPools(poolsData);
        
        // Get locations
        const locationsData = await locationAPI.getAllLocations();
        setLocations(locationsData);
      } catch (err) {
        console.error('Error fetching data:', err);
        setError(err.message || 'Failed to load tournament data');
      }
      setLoading(false);
    };
    
    fetchData();
  }, [tournamentId]);
  
  // Create a new pool
  const handleCreatePool = async () => {
    try {
      const poolData = {
        ...newPool,
        tournament_id: tournamentId
      };
      
      const createdPool = await poolAPI.createPool(poolData);
      setPools([...pools, createdPool]);
      setOpenCreatePoolDialog(false);
      setNewPool({
        name: '',
        location_id: '',
        court_number: 1,
        team_ids: []
      });
    } catch (err) {
      console.error('Error creating pool:', err);
      setError(err.message || 'Failed to create pool');
    }
  };
  
  // Generate pool schedule
  const handleGenerateSchedule = async (poolId) => {
    try {
      await poolAPI.generateSchedule(poolId);
      // Refresh pools after schedule generation
      const poolsData = await poolAPI.getPoolsByTournament(tournamentId);
      setPools(poolsData);
    } catch (err) {
      console.error('Error generating schedule:', err);
      setError(err.message || 'Failed to generate schedule');
    }
  };
  
  // Auto-generate pools for tournament
  const handleAutoGeneratePools = async () => {
    try {
      const generatedPools = await poolAPI.createPoolsForTournament(tournamentId);
      setPools(generatedPools);
      setOpenAutoGenerateDialog(false);
    } catch (err) {
      console.error('Error auto-generating pools:', err);
      setError(err.message || 'Failed to auto-generate pools');
    }
  };
  
  // Update teams in a pool
  const handleUpdatePoolTeams = async () => {
    if (!selectedPool) return;
    
    try {
      await poolAPI.updatePoolTeams(selectedPool.pool_id, {
        team_ids: selectedTeams
      });
      
      // Refresh pools after update
      const poolsData = await poolAPI.getPoolsByTournament(tournamentId);
      setPools(poolsData);
      setOpenAssignTeamsDialog(false);
    } catch (err) {
      console.error('Error updating pool teams:', err);
      setError(err.message || 'Failed to update pool teams');
    }
  };
  
  // Complete pool play and create brackets
  const handleCompletePoolPlay = async () => {
    try {
      await poolAPI.completePoolPlay(tournamentId);
      await poolAPI.createBracketFromPools(tournamentId);
      
      // Refresh tournament data
      const tournamentData = await tournamentAPI.getTournament(tournamentId);
      setTournament(tournamentData);
      
      setOpenCompletionDialog(false);
      
      // Navigate to bracket page
      navigate(`/admin/tournaments/${tournamentId}/bracket`);
    } catch (err) {
      console.error('Error completing pool play:', err);
      setError(err.message || 'Failed to complete pool play');
    }
  };
  
  // Handle opening the assign teams dialog
  const handleOpenAssignTeams = (pool) => {
    setSelectedPool(pool);
    setSelectedTeams(pool.teams || []);
    setOpenAssignTeamsDialog(true);
  };
  
  if (loading) {
    return (
      <AdminLayout>
        <Container>
          <Box display="flex" justifyContent="center" alignItems="center" minHeight="60vh">
            <CircularProgress />
          </Box>
        </Container>
      </AdminLayout>
    );
  }
  
  if (error) {
    return (
      <AdminLayout>
        <Container>
          <Alert severity="error">{error}</Alert>
        </Container>
      </AdminLayout>
    );
  }
  
  // Determine which teams are available (not in any pool)
  const getAssignedTeams = () => {
    const assignedTeamIds = new Set();
    pools.forEach(pool => {
      if (pool.teams) {
        pool.teams.forEach(teamId => assignedTeamIds.add(teamId));
      }
    });
    return assignedTeamIds;
  };
  
  const assignedTeams = getAssignedTeams();
  const unassignedTeams = teams.filter(team => !assignedTeams.has(team.team_id));
  
  return (
    <AdminLayout>
      <Container maxWidth="lg">
        <Breadcrumbs sx={{ mb: 2 }}>
          <Link color="inherit" href="/admin/tournaments">Tournaments</Link>
          <Link color="inherit" href={`/admin/tournaments/${tournamentId}`}>
            {tournament?.name || 'Tournament'}
          </Link>
          <Typography color="textPrimary">Pools</Typography>
        </Breadcrumbs>
        
        <Box sx={{ mb: 4 }}>
          <Typography variant="h4" gutterBottom>
            Pool Management
          </Typography>
          
          <Box sx={{ mb: 2 }}>
            <Typography variant="subtitle1">
              Tournament: {tournament?.name}
            </Typography>
            <Typography variant="subtitle2">
              Status: {tournament?.status || 'Unknown'}
            </Typography>
          </Box>
          
          <Box sx={{ display: 'flex', gap: 2, mb: 3 }}>
            <Button 
              variant="contained" 
              startIcon={<AddIcon />} 
              onClick={() => setOpenCreatePoolDialog(true)}
            >
              Create Pool
            </Button>
            
            <Button 
              variant="outlined" 
              startIcon={<RefreshIcon />} 
              onClick={() => setOpenAutoGenerateDialog(true)}
            >
              Auto-Generate Pools
            </Button>
            
            {pools.length > 0 && (
              <Button 
                variant="outlined" 
                color="secondary" 
                startIcon={<TrophyIcon />} 
                onClick={() => setOpenCompletionDialog(true)}
              >
                Complete Pool Play & Create Brackets
              </Button>
            )}
          </Box>
        </Box>
        
        {pools.length === 0 ? (
          <Paper sx={{ p: 3, textAlign: 'center' }}>
            <Typography variant="h6" color="textSecondary">
              No pools created yet
            </Typography>
            <Typography variant="body2" color="textSecondary" sx={{ mt: 1 }}>
              Create pools manually or use the auto-generate feature
            </Typography>
          </Paper>
        ) : (
          <Grid container spacing={3}>
            {pools.map(pool => (
              <Grid item xs={12} md={6} key={pool.pool_id}>
                <Card>
                  <Box sx={{ p: 2, backgroundColor: '#f5f5f5' }}>
                    <Typography variant="h6">{pool.name}</Typography>
                    <Typography variant="body2">
                      Location: {locations.find(l => l.location_id === pool.location_id)?.name || 'Unknown'}
                    </Typography>
                    <Typography variant="body2">
                      Court: {pool.court_number}
                    </Typography>
                  </Box>
                  
                  <Divider />
                  
                  <Box sx={{ p: 2 }}>
                    <Typography variant="subtitle2" gutterBottom>
                      Teams ({pool.teams?.length || 0})
                    </Typography>
                    
                    {pool.teams && pool.teams.length > 0 ? (
                      <TableContainer component={Paper} variant="outlined" sx={{ mb: 2 }}>
                        <Table size="small">
                          <TableHead>
                            <TableRow>
                              <TableCell>Team Name</TableCell>
                              <TableCell>Division</TableCell>
                            </TableRow>
                          </TableHead>
                          <TableBody>
                            {pool.teams.map(teamId => {
                              const team = teams.find(t => t.team_id === teamId);
                              return team ? (
                                <TableRow key={teamId}>
                                  <TableCell>{team.team_name}</TableCell>
                                  <TableCell>{team.division}</TableCell>
                                </TableRow>
                              ) : null;
                            })}
                          </TableBody>
                        </Table>
                      </TableContainer>
                    ) : (
                      <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                        No teams assigned to this pool
                      </Typography>
                    )}
                    
                    <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                      <Button 
                        size="small" 
                        startIcon={<PersonIcon />}
                        onClick={() => handleOpenAssignTeams(pool)}
                      >
                        Assign Teams
                      </Button>
                      
                      <Button 
                        size="small" 
                        color="primary"
                        onClick={() => handleGenerateSchedule(pool.pool_id)}
                      >
                        Generate Schedule
                      </Button>
                    </Box>
                  </Box>
                </Card>
              </Grid>
            ))}
          </Grid>
        )}
        
        {/* Unassigned Teams Section */}
        {unassignedTeams.length > 0 && (
          <Box sx={{ mt: 4 }}>
            <Typography variant="h6" gutterBottom>
              Unassigned Teams
            </Typography>
            
            <TableContainer component={Paper} variant="outlined">
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell>Team Name</TableCell>
                    <TableCell>Division</TableCell>
                    <TableCell>Contact</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {unassignedTeams.map(team => (
                    <TableRow key={team.team_id}>
                      <TableCell>{team.team_name}</TableCell>
                      <TableCell>{team.division}</TableCell>
                      <TableCell>{team.contact_name}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Box>
        )}
        
        {/* Create Pool Dialog */}
        <Dialog open={openCreatePoolDialog} onClose={() => setOpenCreatePoolDialog(false)}>
          <DialogTitle>Create New Pool</DialogTitle>
          <DialogContent>
            <Box sx={{ mt: 1 }}>
              <TextField
                fullWidth
                label="Pool Name"
                margin="normal"
                value={newPool.name}
                onChange={(e) => setNewPool({ ...newPool, name: e.target.value })}
              />
              
              <FormControl fullWidth margin="normal">
                <InputLabel>Location</InputLabel>
                <Select
                  value={newPool.location_id}
                  onChange={(e) => setNewPool({ ...newPool, location_id: e.target.value })}
                  label="Location"
                >
                  {locations.map(location => (
                    <MenuItem key={location.location_id} value={location.location_id}>
                      {location.name} ({location.courts} courts)
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
              
              <TextField
                fullWidth
                label="Court Number"
                type="number"
                InputProps={{ inputProps: { min: 1 } }}
                margin="normal"
                value={newPool.court_number}
                onChange={(e) => setNewPool({ ...newPool, court_number: parseInt(e.target.value, 10) })}
              />
              
              <FormControl fullWidth margin="normal">
                <InputLabel>Teams</InputLabel>
                <Select
                  multiple
                  value={newPool.team_ids}
                  onChange={(e) => setNewPool({ ...newPool, team_ids: e.target.value })}
                  label="Teams"
                  renderValue={(selected) => (
                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                      {selected.map((teamId) => {
                        const team = teams.find(t => t.team_id === teamId);
                        return (
                          <Chip key={teamId} label={team ? team.team_name : teamId} />
                        );
                      })}
                    </Box>
                  )}
                >
                  {teams.map(team => (
                    <MenuItem key={team.team_id} value={team.team_id}>
                      {team.team_name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Box>
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setOpenCreatePoolDialog(false)}>Cancel</Button>
            <Button 
              onClick={handleCreatePool} 
              variant="contained" 
              disabled={!newPool.name || !newPool.location_id}
            >
              Create
            </Button>
          </DialogActions>
        </Dialog>
        
        {/* Assign Teams Dialog */}
        <Dialog open={openAssignTeamsDialog} onClose={() => setOpenAssignTeamsDialog(false)}>
          <DialogTitle>Assign Teams to {selectedPool?.name}</DialogTitle>
          <DialogContent>
            <FormControl fullWidth margin="normal">
              <InputLabel>Teams</InputLabel>
              <Select
                multiple
                value={selectedTeams}
                onChange={(e) => setSelectedTeams(e.target.value)}
                label="Teams"
                renderValue={(selected) => (
                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                    {selected.map((teamId) => {
                      const team = teams.find(t => t.team_id === teamId);
                      return (
                        <Chip key={teamId} label={team ? team.team_name : teamId} />
                      );
                    })}
                  </Box>
                )}
              >
                {teams.map(team => (
                  <MenuItem key={team.team_id} value={team.team_id}>
                    {team.team_name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setOpenAssignTeamsDialog(false)}>Cancel</Button>
            <Button onClick={handleUpdatePoolTeams} variant="contained">
              Save
            </Button>
          </DialogActions>
        </Dialog>
        
        {/* Auto-Generate Pools Dialog */}
        <Dialog open={openAutoGenerateDialog} onClose={() => setOpenAutoGenerateDialog(false)}>
          <DialogTitle>Auto-Generate Pools</DialogTitle>
          <DialogContent>
            <DialogContentText>
              This will automatically create pools and distribute teams evenly. If pools already exist, they will be replaced.
            </DialogContentText>
            <DialogContentText sx={{ mt: 2 }}>
              Teams: {teams.length}
            </DialogContentText>
            <DialogContentText>
              Locations: {locations.length} (Total Courts: {locations.reduce((sum, loc) => sum + loc.courts, 0)})
            </DialogContentText>
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setOpenAutoGenerateDialog(false)}>Cancel</Button>
            <Button onClick={handleAutoGeneratePools} variant="contained" color="primary">
              Generate Pools
            </Button>
          </DialogActions>
        </Dialog>
        
        {/* Complete Pool Play Dialog */}
        <Dialog open={openCompletionDialog} onClose={() => setOpenCompletionDialog(false)}>
          <DialogTitle>Complete Pool Play & Create Brackets</DialogTitle>
          <DialogContent>
            <DialogContentText>
              This will mark pool play as complete and create brackets based on the current standings. Make sure all pool matches have been scored.
            </DialogContentText>
            <DialogContentText sx={{ mt: 2 }}>
              Pools: {pools.length}
            </DialogContentText>
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setOpenCompletionDialog(false)}>Cancel</Button>
            <Button onClick={handleCompletePoolPlay} variant="contained" color="secondary">
              Complete & Create Brackets
            </Button>
          </DialogActions>
        </Dialog>
      </Container>
    </AdminLayout>
  );
};

export default AdminPoolsPage; 